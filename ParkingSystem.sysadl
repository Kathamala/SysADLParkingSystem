Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } datatype Ticket { attributes : licensePlate : String ; entranceTime : DateTime ; validatedTime : DateTime ; barcode : String ; helpText : String ; exitTime : DateTime ; } dimension ColorD value type Color { dimension = ColorD } value type DateTime { } datatype FiscalNote { attributes : ticket : Ticket ; costPrice : Price ; payedPrice : Price ; address : String ; paymentType : PaymentType ; } dimension PriceD value type Price { unit = Real dimension = PriceD } enum PaymentType { DEBIT_CARD , CREDIT_CARD , PIX , CASH } unit Real { dimension = PriceD } unit Green { dimension = ColorD } value type GreenColor extends Color { unit = Green dimension = ColorD } unit Red { dimension = ColorD } unit Blue { dimension = ColorD } value type RedColor extends Color { unit = Red dimension = ColorD } value type BlueColor extends Color { unit = Blue dimension = ColorD } }  Requirement CalculateFeeFR ( 1.6 ) { text = "\"The system must calculate the vehicle parking fee when the client is paying for the ticket\"." derive ParkingSystemRequirements.ParkingSystemFR.MakePaymentFR ; }  Requirement IssueReceiptFR ( 1.7 ) { text = "\"The system must provide the user with the ability to issue the payment receipt\"." derive ParkingSystemRequirements.ParkingSystemFR.MakePaymentFR ; }  Requirement MasterKeyFR ( 1.10 ) { text = "\"The system must provide the operator with the ability to open the parking gate with the master key\"." derive ParkingSystemRequirements.ParkingSystemFR ; }  Requirement ParkingLotConfigurationsFR ( 1.11 ) { text = "\"The system must provide the administrator with the ability to define configurations for the parking lot\"." derive ParkingSystemRequirements.ParkingSystemFR ; }  Requirement DetectVacancyFR ( 1.12 ) { text = "\"The system must automatically detect the occupation of a parking spot\"." derive ViewStatusFR ; }  Requirement GenerateReportFR ( 1.13 ) { text = "\"The system must be able to generate usage reports, including occupation statistics, rush hour and profit\"." derive ParkingSystemRequirements.ParkingSystemFR ; } Requirement AvailabilityNFR ( 2.5 ) { text = "\"The inactivity time planned for maintenance must not affect the operations during the parking lot opening hours\"." derive ParkingSystemRequirements.QualityNFR.AvailabilityNFR ; } Requirement UsabilityNFR ( 2.8 ) { text = "\"The warnings and instructions must be clear and comprehensible\"." derive ParkingSystemRequirements.QualityNFR.UsabilityNFR ; } Requirement FaultToleranceNFR ( 2.10 ) { text = "\"The system must have redundancy in critical services\"." derive ParkingSystemRequirements.QualityNFR.FaultToleranceNFR ; } Requirement ParkingSystemRequirements ( 0 ) { text = "\"The system must satisfy the functional and non-functional concerns\"." Requirement ParkingSystemFR ( 1 ) { text = "\"The system must be able to manage the vehicles entering and leaving the parking lot\"." Requirement RegisterVehicleFR ( 1.1 ) { text = "\"The system must register the vehicle in the parking lot entrance\"." derive ParkingSystemFR ; Requirement OpenParkingGateFR ( 1.9 ) { text = "\"The system must automatically open the exit parking gate if the vehicle has a validated ticket\"." } Requirement IssueTicketFR ( 1.4 ) { text = "\"The system must provide the user with the ability to issue a validation ticket at the parking lot entrance\"." } } Requirement MakePaymentFR ( 1.5 ) { text = "\"The system must provide the user with the ability to make the payment, and validate the ticket\"." derive ParkingSystemFR ; } Requirement ExitParkingGateFR ( 1.8 ) { text = "\"The system must provide the user with the ability to request the opening of the parking gate, if the ticket is validated\"." derive ParkingSystemFR ; } } Requirement QualityNFR ( 2 ) { text = "\"The system must satisfy the performance, security, conformity, scalability, usability,fault tolerance and availability\"." Requirement AvailabilityNFR ( 2.4 ) { text = "\"The entrace/leaving controlling system must be available 24 hours a day, 7 days a week\"." } Requirement FaultToleranceNFR ( 2.9 ) { text = "\"The system must be projected to tolerate hardware and software faults without interrupting the services\"." } Requirement UsabilityNFR ( 2.7 ) { text = "\"The system must be easy to use for the operators and clients, with an intuitive interface\"." } Requirement PerformanceNFR ( 2.1 ) { text = "\"The system must be able to process the entrance/leaving of a vehicle in less than 5 seconds\"." } Requirement SecurityNFR ( 2.3 ) { text = "\"The system must be able to ensure the client darta and financial transfers protection\"." } Requirement PerformanceNFR ( 2.2 ) { text = "\"The waiting time at the entrace/leaving line must not exceed 10 minutes, including during the rush hour\"." } Requirement ScalabilityNFR ( 2.6 ) { text = "\"The system must be able to horizontally scale in order to support the increase of demand during events\"." } Requirement ConformityNFR ( 2.11 ) { text = "\"The system must be in conformity with all the local, stadual and national regulations regarding paid parking lots, data privacy and security\"." } } } Requirement ViewPricesFR ( 1.2 ) { text = "\"The system must provide the user with the ability to view the parking lot prices at the entrance station\"." derive ParkingSystemRequirements.ParkingSystemFR ; } Requirement ViewStatusFR ( 1.3 ) { text = "\"The system must provide the user with the ability to view the parking lot status at the entrance station\"." derive ParkingSystemRequirements.ParkingSystemFR ; } package ParkingSystemConnectors { import ParkingSystemPorts ; } package ParkingSystemComponents { import ParkingSystemPorts ; import SysADL.types ; import ParkingSystemConnectors ;
	component def ParkingControllerCP { } boundary
	component def ExitInterfaceCP { } boundary
	component def PaymentInterfaceCP { } boundary
	component def EntranceInterfaceCP { }
	component def PaymentControllerCP { }
	component def GateControllerCP { }
	component def CameraCP { }
	component def ParkingInterfaceCP { }
	component def ParkingSystem { }
	component def SpotControllerCP { }
	component def PresenceSensorCP { ports : detected : PresenceOPT ; }
	component def LEDCP { ports : display : ColorOPT ; } } package ParkingSystemPorts { import SysADL.types ; port def ButtonPressIPT { flow in Boolean } port def TicketOPT { flow out Ticket } port def OpenSignalOPT { flow out Boolean } port def TicketIPT { flow in Ticket } port def LicensePlateIPT { flow in String } port def TicketValidatedIPT { flow in Boolean } port def PaymentMadeOPT { flow out Boolean } port def FiscalNoteOPT { flow out FiscalNote } port def PresenceIPT { flow in Boolean } port def PriceOPT { flow out Price } port def StatusOPT { flow out Int } port def ColorOPT { flow out Color } port def ColorIPT { flow in Color } port def PresenceOPT { flow out Boolean } port def LicensePlateOPT { flow out String } port def OpenSignalIPT { flow in Boolean } port def CloseSignalIPT { flow in Boolean } port def PaymentMadeIPT { flow in Boolean } port def TicketValidatedOPT { flow out Boolean } port def CloseSignalOPT { flow out Boolean } }