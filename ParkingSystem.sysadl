Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } }  Requirement PerformanceNFR ( 2.1 ) { text = "The system must be able to process the entrance/leaving of a vehicle in less than 5 seconds." } Requirement PerformanceNFR ( 2.2 ) { text = "The waiting time at the entrace/leaving line must not exceed 10 minutes, including during the rush hour." }Requirement CalculateFeeFR ( 1.6 ) { text = "The system must calculate the vehicle parking fee when the client is paying for the ticket." derive ParkingSystemRequirements.ParkingSystemFR.MakePaymentFR ; }  Requirement IssueReceiptFR ( 1.7 ) { text = "The system must provide the user with the ability to issue the payment receipt." derive ParkingSystemRequirements.ParkingSystemFR.MakePaymentFR ; }  Requirement MasterKeyFR ( 1.10 ) { text = "The system must provide the operator with the ability to open the parking gate with the master key." derive ParkingSystemRequirements.ParkingSystemFR ; }  Requirement ParkingLotConfigurationsFR ( 1.11 ) { text = "The system must provide the administrator with the ability to define configurations for the parking lot." derive ParkingSystemRequirements.ParkingSystemFR ; }  Requirement DetectVacancyFR ( 1.12 ) { text = "The system must automatically detect the occupation of a parking spot." derive ViewStatusFR ; }  Requirement GenerateReportFR ( 1.13 ) { text = "The system must be able to generate usage reports, including occupation statistics, rush hour and profit." derive ParkingSystemRequirements.ParkingSystemFR ; } Requirement SecurityNFR ( 2.3 ) { text = "The system must be able to ensure the client darta and financial transfers protection." } Requirement AvailabilityNFR ( 2.4 ) { text = "The entrace/leaving controlling system must be available 24 hours a day, 7 days a week." } Requirement AvailabilityNFR ( 2.5 ) { text = "The inactivity time planned for maintenance must not affect the operations during the parking lot opening hours." } Requirement ScalabilityNFR ( 2.6 ) { text = "The system must be able to horizontally scale in order to support the increase of demand during events." } Requirement UsabilityNFR ( 2.7 ) { text = "The system must be easy to use for the operators and clients, with an intuitive interface." } Requirement UsabilityNFR ( 2.8 ) { text = "The warnings and instructions must be clear and comprehensible." } Requirement FaultToleranceNFR ( 2.9 ) { text = "The system must be projected to tolerate hardware and software faults without interrupting the services." } Requirement FaultToleranceNFR ( 2.10 ) { text = "The system must have redundancy in critical services." } Requirement ConformityNFR ( 2.11 ) { text = "The system must be in conformity with all the local, stadual and national regulations regarding paid parking lots, data privacy and security." } Requirement ParkingSystemRequirements ( 0 ) { text = "The system must satisfy the functional and non-functional concerns." Requirement ParkingSystemFR ( 1 ) { text = "The system must be able to manage the vehicles entering and leaving the parking lot." Requirement RegisterVehicleFR ( 1.1 ) { text = "The system must register the vehicle in the parking lot entrance." derive ParkingSystemFR ; Requirement OpenParkingGateFR ( 1.9 ) { text = "The system must automatically open the exit parking gate if the vehicle has a validated ticket." } Requirement IssueTicketFR ( 1.4 ) { text = "The system must provide the user with the ability to issue a validation ticket at the parking lot entrance." } } Requirement MakePaymentFR ( 1.5 ) { text = "The system must provide the user with the ability to make the payment, and validate the ticket." derive ParkingSystemFR ; } Requirement ExitParkingGateFR ( 1.8 ) { text = "The system must provide the user with the ability to request the opening of the parking gate, if the ticket is validated." derive ParkingSystemFR ; } } Requirement ParkingLotNFR ( 2 ) { text = "The system must satisfy the modifiability, agility, scalability, availability, sustainability, tolerance and accuracy concerns" } } Requirement ViewPricesFR ( 1.2 ) { text = "The system must provide the user with the ability to view the parking lot prices at the entrance station." derive ParkingSystemRequirements.ParkingSystemFR ; } Requirement ViewStatusFR ( 1.3 ) { text = "The system must provide the user with the ability to view the parking lot status at the entrance station." derive ParkingSystemRequirements.ParkingSystemFR ; }